spring.application.name=api-gateway
server.port=5555

#值得注意点是  path和url 映射的转发是不具有Ribbon和Hystrix功能的
#传统的没有Eureka配合使用 我们自己配置每一个请求的路由地址
#zuul.routes.<route>.path=
#zuul.routes.<route>.url=
zuul.routes.api-a-url.path=/api-a-url/**
zuul.routes.api-a-url.url=http://localhost:8080/

#配合Eureka使用配置路由  这样才具有Ribbon和Hystrix功能
#其实这样配置  ZUUL已经默认帮我们配置好了就是根据服务名 来默认配置的 就像下面的一样
#但是我们可以忽略一些 服务名  不让zuul自动帮我们创建请求路由的zuul.ignored-services
zuul.routes.feign-client.path=/feign-client/**
zuul.routes.feign-client.serviceId=feign-client

# /eureka-client/?   匹配单个字符/eureka-client/s
# /eureka-client/*   匹配任意字符/eureka-client/dasdasd
# /eureka-client/**  匹配多个路径/eureka-client/asda/asds/reqw
zuul.routes.eureka-client.path=/eureka-client/**
zuul.routes.eureka-client.serviceId=eureka-client

#zuul可以实现本地跳转  当我们访问http://localhost:5555/api-b/hello的时候
# 请求会转发到 本地的/local/hello方法上面
zuul.routes.api-b.path=/api-b/**
zuul.routes.api-b.url=forward:/local


#开启和关闭重试功能  全局和指定服务
zuul.retryable=false
zuul.routes.<route>.retryable=true


#默认情况下面 zuul会将HTTP请求头中的敏感信息过滤掉  防止传到下游系统事务外部服务中
#默认的敏感信息通过zuul.sensitiveHeaders参数定义，包括Cookie、Set-Cookie、Authorization
#三个属性，我们可以设置全局参数为空来覆盖默认值,这样就可以实现Cookie的传递
#zuul.sensitiveHeaders=

#可以通过制定路由的参数来配置
#方法一：对指定的路由开启自定义敏感头
zuul.routes.<router>.custom-sensitive-headers=true
#方法二：指定路由敏感头为空
zuul.routes.<router>.sensitive-headers.


#当我们通过验证后登陆到了系统中  跳转的URL确实一个具体的WEB实例地址，而不是路由的实例地址  这是一个很严重的问题
#作为统一入口的大门不能暴露服务内部的细节  原因在于zuul在请求转发的时候没有做到 将最初的Host信息设置正确
#解决这个问题就是在路由转发前zuul设置Host头信息，用来标识最初的服务端请求
zuul.addHostHeader=true

#Eureka客户端向服务端发送心跳的时间间隔，单位为秒（客户端告诉服务端自己会按照该规则）
eureka.instance.lease-renewal-interval-in-seconds =5
#Eureka服务端在收到最后一次心跳之后等待的时间上限，单位为秒，超过则剔除（客户端告诉服务端按照此规则等待自己）
eureka.instance.lease-expiration-duration-in-seconds =5

#注册中心的地址
eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/
